/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.monoxial.password_manager;

import com.nulabinc.zxcvbn.Strength;
import com.nulabinc.zxcvbn.Zxcvbn;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * La classe JFrame_gestionnaire est la fenêtre principale du gestionnaire
 *
 * @author Monoxial
 */
public class JFrame_gestionnaire extends javax.swing.JFrame {

    /**
     * Création de l'interface du gestionnaire
     */
    private JFrame_gestionnaire() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane_jListID = new javax.swing.JScrollPane();
        jList_listeID = new javax.swing.JList<>();
        jLabel_label = new javax.swing.JLabel();
        jTextField_label = new javax.swing.JTextField();
        jLabel_ID = new javax.swing.JLabel();
        jTextField_ID = new javax.swing.JTextField();
        jLabel_MDP = new javax.swing.JLabel();
        jLabel_BRIEF = new javax.swing.JLabel();
        jScrollPane_brief = new javax.swing.JScrollPane();
        jTextArea_brief = new javax.swing.JTextArea();
        jProgressBar_forceMDP = new javax.swing.JProgressBar();
        jLabel_forceMDP = new javax.swing.JLabel();
        jLabel_ListeID = new javax.swing.JLabel();
        jButton_modifierID = new javax.swing.JButton();
        jTextField_MDPClair = new javax.swing.JTextField();
        jLabel_dateExpiration = new javax.swing.JLabel();
        jButton_ajouterElement = new javax.swing.JButton();
        jButton_SupprimerElement = new javax.swing.JButton();
        jButton_expiDate = new javax.swing.JButton();
        datePicker_selecteurDate = new com.github.lgooddatepicker.components.DatePicker();
        jMenuBar_Menu = new javax.swing.JMenuBar();
        jMenu_Fichiers = new javax.swing.JMenu();
        jMenuItem_OuvrirCoffre = new javax.swing.JMenuItem();
        jMenuItem_NouveauCoffre = new javax.swing.JMenuItem();
        jMenuItem_Sauvegarder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gestionnaire d'identifiants");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jList_listeID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jList_listeID.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_listeIDValueChanged(evt);
            }
        });
        jScrollPane_jListID.setViewportView(jList_listeID);

        jLabel_label.setText("Label :");

        jLabel_ID.setText("Identifiant :");

        jLabel_MDP.setText("Mot de passe :");

        jLabel_BRIEF.setText("Description :");

        jTextArea_brief.setColumns(20);
        jTextArea_brief.setRows(5);
        jScrollPane_brief.setViewportView(jTextArea_brief);

        jProgressBar_forceMDP.setMaximum(4);
        jProgressBar_forceMDP.setToolTipText("<html>\nSe remplit en fonction de la présence de : <br>\n- majuscule(s) <br>\n- nombre(s) <br>\n- caractère(s) spéciaux <br>\nPlus la barre est rempli plus le mot de passe est censé être sécurisé.");

        jLabel_forceMDP.setText("Résistance du mdp :");
        jLabel_forceMDP.setFont(new java.awt.Font("Arial", 0, 8)); // NOI18N

        jLabel_ListeID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_ListeID.setText("Listes des identifiants :");

        jButton_modifierID.setText("Enregistrer dans le coffre");
        jButton_modifierID.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButton_modifierID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_modifierIDActionPerformed(evt);
            }
        });

        jTextField_MDPClair.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_MDPClairKeyTyped(evt);
            }
        });

        jLabel_dateExpiration.setText("Date d'expiration :");

        jButton_ajouterElement.setText("+");
        jButton_ajouterElement.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_ajouterElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ajouterElementActionPerformed(evt);
            }
        });

        jButton_SupprimerElement.setText("-");
        jButton_SupprimerElement.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_SupprimerElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SupprimerElementActionPerformed(evt);
            }
        });

        jButton_expiDate.setText("Verifier les dates d'expirations");
        jButton_expiDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_expiDateActionPerformed(evt);
            }
        });

        datePicker_selecteurDate.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        datePicker_selecteurDate.setMinimumSize(new java.awt.Dimension(80, 34));

        jMenu_Fichiers.setText("Fichiers");

        jMenuItem_OuvrirCoffre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_OuvrirCoffre.setText("Ouvrir coffre");
        jMenuItem_OuvrirCoffre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OuvrirCoffreActionPerformed(evt);
            }
        });
        jMenu_Fichiers.add(jMenuItem_OuvrirCoffre);

        jMenuItem_NouveauCoffre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_NouveauCoffre.setText("Nouveau Coffre");
        jMenuItem_NouveauCoffre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_NouveauCoffreActionPerformed(evt);
            }
        });
        jMenu_Fichiers.add(jMenuItem_NouveauCoffre);

        jMenuItem_Sauvegarder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Sauvegarder.setText("Sauvegarder");
        jMenuItem_Sauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SauvegarderActionPerformed(evt);
            }
        });
        jMenu_Fichiers.add(jMenuItem_Sauvegarder);
        jMenu_Fichiers.add(jSeparator1);

        jMenuItem1.setText("À propos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu_Fichiers.add(jMenuItem1);

        jMenuBar_Menu.add(jMenu_Fichiers);

        setJMenuBar(jMenuBar_Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_label)
                    .addComponent(jLabel_ID)
                    .addComponent(jLabel_MDP)
                    .addComponent(jLabel_BRIEF)
                    .addComponent(jLabel_forceMDP)
                    .addComponent(jLabel_dateExpiration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_label, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(jTextField_MDPClair)
                    .addComponent(jTextField_ID, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_modifierID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane_brief, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker_selecteurDate, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar_forceMDP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane_jListID, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(jLabel_ListeID, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(jButton_expiDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_ajouterElement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_SupprimerElement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_label)
                    .addComponent(jTextField_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_ListeID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_ajouterElement, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_SupprimerElement, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_ID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_MDP)
                            .addComponent(jTextField_MDPClair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar_forceMDP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_forceMDP, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_dateExpiration)
                            .addComponent(datePicker_selecteurDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane_brief, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_BRIEF)))
                    .addComponent(jScrollPane_jListID))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_expiDate, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jButton_modifierID, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        setSize(new java.awt.Dimension(729, 431));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_NouveauCoffreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_NouveauCoffreActionPerformed
        if (sauvegarder) {

            var nouveauCoffre = new JDialog_NouveauCoffre(this, true);
            nouveauCoffre.setLocationRelativeTo(this);
            var result = nouveauCoffre.showDialog();
            if (!"".equals(result)) { //Dans l'évantualité ou l'utilisateur ferme la fenêtre sans valider (annulation)
                coffreRam.setNomCoffre(result);
            }

        } else {
            var result = JOptionPane.showConfirmDialog(this, "Confirmez vous la création d'un nouveau coffre ? Vous risquez de perdre les identifiants non sauvegardés.", "Le coffre ouvert n'est pas sauvegardé", JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                coffreRam = new Coffre(null);
                afficherCoffre(); //On actualise le contenu du nouveau coffre (vide évidement)
                sauvegarder = true;
                jMenuItem_NouveauCoffreActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_jMenuItem_NouveauCoffreActionPerformed

    private void jMenuItem_OuvrirCoffreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OuvrirCoffreActionPerformed
        if (sauvegarder) {
            var selectionEmplacement = new JFileChooser();
            selectionEmplacement.setFileFilter(new FileNameExtensionFilter("Coffre", EXTENSION));
            var result = selectionEmplacement.showOpenDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                var jDialog_MotdepasseCoffre = new JDialog_MotdepasseCoffre(this, true);
                jDialog_MotdepasseCoffre.setLocationRelativeTo(this);
                var clefCoffre = jDialog_MotdepasseCoffre.showDialog();

                if (!(clefCoffre.length == 0)) { //Dans le cas ou la saisis du mot de passe est annulé
                    Chiffreur chiffreurCoffre = new Chiffreur(clefCoffre);
                    clefCoffre = null; //On détruit la clef dès qu'elle n'est plus nécessaire.

                    boolean success = false;
                    try {
                        var fichierCoffre = new FileInputStream(selectionEmplacement.getSelectedFile());
                        coffreRam = (Coffre) Chiffreur.decrypt(fichierCoffre);
                        success = true;
                    } catch (FileNotFoundException ex) {
                        //Logger.getLogger(JFrame_gestionnaire.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Fichier inexistant !", "Erreur", JOptionPane.ERROR_MESSAGE);

                    } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException ex) {
                        //Logger.getLogger(JFrame_gestionnaire.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Erreur de mot de passe ou coffre incorrect !", "Erreur", JOptionPane.ERROR_MESSAGE);
                    } finally {
                        chiffreurCoffre = null; //On d�truit la derni�re r�f�rence du Chiffreur
                    }
                    if (success) {
                        jMenuItem_Sauvegarder.setEnabled(true);
                        jButton_ajouterElement.setEnabled(true);
                        jButton_SupprimerElement.setEnabled(true);
                        jButton_modifierID.setEnabled(true);
                        afficherCoffre();
                    } else {
                        jMenuItem_OuvrirCoffreActionPerformed(evt); //On relance
                    }
                }

            } else //Dans le cas ou l'on confirme l'ouverture d'un coffre alors qu'il y à un coffre déjà ouvert mais que l'on annule l'ouverture d'un coffre
            {
                afficherCoffre();
            }
        } else {
            var result = JOptionPane.showConfirmDialog(this, "Confirmez vous l'ouverture d'un nouveau coffre ? Vous risquez de perdre les identifiants non sauvegardés.", "Le coffre ouvert n'est pas sauvegardé", JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                coffreRam = new Coffre(null);
                sauvegarder = true;
                jMenuItem_OuvrirCoffreActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_jMenuItem_OuvrirCoffreActionPerformed

    private void jMenuItem_SauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SauvegarderActionPerformed
        var selectionEmplacement = new JFileChooser();
        selectionEmplacement.setSelectedFile(new File(coffreRam.getNomCoffre() + "." + EXTENSION));
        var result = selectionEmplacement.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) { //Si un emplacement a été choisis
            var jDialog_MotdepasseCoffre = new JDialog_MotdepasseCoffre(this, true);
            jDialog_MotdepasseCoffre.setLocationRelativeTo(this);
            var clefCoffre = jDialog_MotdepasseCoffre.showDialog();

            if (!(clefCoffre.length == 0)) { //Dans le cas ou la saisis du mot de passe est annul�
                Chiffreur dechiffreurCoffre = new Chiffreur(clefCoffre); //On cr�ee un chiffreur avec comme clef le contenus de jPassword
                clefCoffre = null; //On détruit la clef dès que possible

                try {
                    FileOutputStream fichier;
                    fichier = new FileOutputStream(selectionEmplacement.getSelectedFile());
                    Chiffreur.encrypt(coffreRam, fichier);
                    sauvegarder = true;
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JFrame_gestionnaire.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Fichier inexistant !", "Erreur", JOptionPane.ERROR_MESSAGE);
                } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException ex) {
                    JOptionPane.showMessageDialog(this, "Une erreur est survenue lors de l'enregistrement du coffre à chiffrer", "Erreur", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(JFrame_gestionnaire.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    dechiffreurCoffre = null; //On d�truit la derni�re r�f�rence du Chiffreur
                }
            }
        }

    }//GEN-LAST:event_jMenuItem_SauvegarderActionPerformed

    private void afficherCoffre() {
        var model = new DefaultListModel<String>();

        for (int i = 0; i < coffreRam.getListeElement().size(); i++) {
            model.add(i, coffreRam.getElement(i).getNom());
        }
        jList_listeID.setModel(model);
    }

    private void jList_listeIDValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_listeIDValueChanged
        if (jList_listeID.getSelectedIndex() != -1) { //Empeche le cas ou il n'y � pas d'�l�ment de s�lectionn�

            jTextField_label.setText(coffreRam.getElement(jList_listeID.getSelectedIndex()).getNom());
            jTextField_ID.setText(coffreRam.getElement(jList_listeID.getSelectedIndex()).getId());
            jTextField_MDPClair.setText(coffreRam.getElement(jList_listeID.getSelectedIndex()).getMdp());
            datePicker_selecteurDate.setDate(coffreRam.getElement(jList_listeID.getSelectedIndex()).getExpi());
            jProgressBar_forceMDP.setValue(calculForceMDP(coffreRam.getElement(jList_listeID.getSelectedIndex()).getMdp()));

            jTextArea_brief.setText(coffreRam.getElement(jList_listeID.getSelectedIndex()).getBrief());
        }
    }//GEN-LAST:event_jList_listeIDValueChanged

    private void jButton_modifierIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_modifierIDActionPerformed
        if (jList_listeID.getSelectedIndex() != -1) //Empeche le cas ou il n'y � pas d'�l�ment de s�lectionn�
        {
            coffreRam.getElement(jList_listeID.getSelectedIndex()).setNom(jTextField_label.getText());
            coffreRam.getElement(jList_listeID.getSelectedIndex()).setId(jTextField_ID.getText());
            coffreRam.getElement(jList_listeID.getSelectedIndex()).setMdp(jTextField_MDPClair.getText());
            coffreRam.getElement(jList_listeID.getSelectedIndex()).setExpi(datePicker_selecteurDate.getDate());
            coffreRam.getElement(jList_listeID.getSelectedIndex()).setBrief(jTextArea_brief.getText());

        } else { //Dans le cas ou aucun élément n'est séléctionné
            coffreRam.ajouter(new Element(jTextField_label.getText(), jTextField_ID.getText(), jTextField_MDPClair.getText(), jTextArea_brief.getText(), datePicker_selecteurDate.getDate()));
        }
        sauvegarder = false;
        afficherCoffre();
    }//GEN-LAST:event_jButton_modifierIDActionPerformed

    private void jTextField_MDPClairKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_MDPClairKeyTyped
        jProgressBar_forceMDP.setValue(calculForceMDP(jTextField_MDPClair.getText()));
    }//GEN-LAST:event_jTextField_MDPClairKeyTyped

    private void jButton_ajouterElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ajouterElementActionPerformed
        coffreRam.ajouter(new Element("Nouvel Element", "", "", "", null));
        sauvegarder = false;
        afficherCoffre();
    }//GEN-LAST:event_jButton_ajouterElementActionPerformed

    private void jButton_SupprimerElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SupprimerElementActionPerformed
        if (jList_listeID.getSelectedIndex() != -1) //Empeche le cas ou il n'y � pas d'�l�ment de s�lectionn�
        {
            coffreRam.supprimerAt(jList_listeID.getSelectedIndex());
            sauvegarder = false;
            afficherCoffre();
        }
    }//GEN-LAST:event_jButton_SupprimerElementActionPerformed

    private void jButton_expiDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_expiDateActionPerformed
        var jDialog_DateExpiration = new JDialog_DateExpiration(this, false);
        jDialog_DateExpiration.setLocationRelativeTo(this);
        jDialog_DateExpiration.showDialog(coffreRam);
    }//GEN-LAST:event_jButton_expiDateActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        var jDialog_Apropos = new JDialog_Apropos(this, true);
        jDialog_Apropos.setLocationRelativeTo(this);
        jDialog_Apropos.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (sauvegarder == false) {
            var result = JOptionPane.showConfirmDialog(this, "Confirmez vous la fermeture de l'application ? Vous risquez de perdre les identifiants non sauvegardés.", "Le coffre ouvert n'est pas sauvegardé", JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                this.dispose();
            }
        }
        else
        {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    static int calculForceMDP(String mdp) {
        Zxcvbn zxcvbn = new Zxcvbn();
        Strength strength = zxcvbn.measure(mdp);
        return strength.getScore();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            System.setProperty("awt.useSystemAAFontSettings", "on");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            System.out.println("Error setting native LAF: " + e);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JFrame_gestionnaire().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePicker_selecteurDate;
    private javax.swing.JButton jButton_SupprimerElement;
    private javax.swing.JButton jButton_ajouterElement;
    private javax.swing.JButton jButton_expiDate;
    private javax.swing.JButton jButton_modifierID;
    private javax.swing.JLabel jLabel_BRIEF;
    private javax.swing.JLabel jLabel_ID;
    private javax.swing.JLabel jLabel_ListeID;
    private javax.swing.JLabel jLabel_MDP;
    private javax.swing.JLabel jLabel_dateExpiration;
    private javax.swing.JLabel jLabel_forceMDP;
    private javax.swing.JLabel jLabel_label;
    private javax.swing.JList<String> jList_listeID;
    private javax.swing.JMenuBar jMenuBar_Menu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem_NouveauCoffre;
    private javax.swing.JMenuItem jMenuItem_OuvrirCoffre;
    private javax.swing.JMenuItem jMenuItem_Sauvegarder;
    private javax.swing.JMenu jMenu_Fichiers;
    private javax.swing.JProgressBar jProgressBar_forceMDP;
    private javax.swing.JScrollPane jScrollPane_brief;
    private javax.swing.JScrollPane jScrollPane_jListID;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea_brief;
    private javax.swing.JTextField jTextField_ID;
    private javax.swing.JTextField jTextField_MDPClair;
    private javax.swing.JTextField jTextField_label;
    // End of variables declaration//GEN-END:variables
    private Coffre coffreRam = new Coffre("Sans Nom");
    private final String EXTENSION = "coffre";
    private boolean sauvegarder = true;
}
